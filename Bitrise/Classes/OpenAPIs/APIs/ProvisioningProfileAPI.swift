//
// ProvisioningProfileAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ProvisioningProfileAPI {
    /**
     Confirm a provisioning profile upload
     
     - parameter appSlug: (path) App slug 
     - parameter provisioningProfileSlug: (path) Provisioning profile slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func provisioningProfileConfirm(appSlug: String, provisioningProfileSlug: String, apiResponseQueue: DispatchQueue = BitriseAPI.apiResponseQueue, completion: @escaping ((_ data: V0ProvisionProfileResponseModel?,_ error: Error?) -> Void)) {
        provisioningProfileConfirmWithRequestBuilder(appSlug: appSlug, provisioningProfileSlug: provisioningProfileSlug).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Confirm a provisioning profile upload
     - POST /apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}/uploaded
     - This is the last step of the upload process. Confirm the provisioning profile upload and view the file on the Code Signing tab of a specific app. Read more in our [Confirming the iOS code signing file upload](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter provisioningProfileSlug: (path) Provisioning profile slug 
     - returns: RequestBuilder<V0ProvisionProfileResponseModel> 
     */
    open class func provisioningProfileConfirmWithRequestBuilder(appSlug: String, provisioningProfileSlug: String) -> RequestBuilder<V0ProvisionProfileResponseModel> {
        var path = "/apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}/uploaded"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let provisioningProfileSlugPreEscape = "\(APIHelper.mapValueToPathItem(provisioningProfileSlug))"
        let provisioningProfileSlugPostEscape = provisioningProfileSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provisioning-profile-slug}", with: provisioningProfileSlugPostEscape, options: .literal, range: nil)
        let URLString = BitriseAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<V0ProvisionProfileResponseModel>.Type = BitriseAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a provisioning profile
     
     - parameter appSlug: (path) App slug 
     - parameter provisioningProfile: (body) Provisioning profile parameters such as file name and file size 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func provisioningProfileCreate(appSlug: String, provisioningProfile: V0ProvisionProfileUploadParams, apiResponseQueue: DispatchQueue = BitriseAPI.apiResponseQueue, completion: @escaping ((_ data: V0ProvisionProfileResponseModel?,_ error: Error?) -> Void)) {
        provisioningProfileCreateWithRequestBuilder(appSlug: appSlug, provisioningProfile: provisioningProfile).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a provisioning profile
     - POST /apps/{app-slug}/provisioning-profiles
     - Create a temporary pre-signed upload URL (expires in 10 minutes) for the provisioning profile and upload it to AWS with a simple `curl` request. To complete the upload process, continue with the [POST /apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}/uploaded](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-confirm) endpoint. Read more in our [Creating and uploading an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#creating--uploading-an-ios-code-signing-file) guide.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter provisioningProfile: (body) Provisioning profile parameters such as file name and file size 
     - returns: RequestBuilder<V0ProvisionProfileResponseModel> 
     */
    open class func provisioningProfileCreateWithRequestBuilder(appSlug: String, provisioningProfile: V0ProvisionProfileUploadParams) -> RequestBuilder<V0ProvisionProfileResponseModel> {
        var path = "/apps/{app-slug}/provisioning-profiles"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let URLString = BitriseAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: provisioningProfile)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<V0ProvisionProfileResponseModel>.Type = BitriseAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a provisioning profile
     
     - parameter appSlug: (path) App slug 
     - parameter provisioningProfileSlug: (path) Provisioning profile slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func provisioningProfileDelete(appSlug: String, provisioningProfileSlug: String, apiResponseQueue: DispatchQueue = BitriseAPI.apiResponseQueue, completion: @escaping ((_ data: V0ProvisionProfileResponseModel?,_ error: Error?) -> Void)) {
        provisioningProfileDeleteWithRequestBuilder(appSlug: appSlug, provisioningProfileSlug: provisioningProfileSlug).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a provisioning profile
     - DELETE /apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}
     - Delete an app's provisioning profile. You can fetch the provisioning profile's slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list) endpoint. Read more in our [Deleting an iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#deleting-an-ios-code-signing-file) guide.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter provisioningProfileSlug: (path) Provisioning profile slug 
     - returns: RequestBuilder<V0ProvisionProfileResponseModel> 
     */
    open class func provisioningProfileDeleteWithRequestBuilder(appSlug: String, provisioningProfileSlug: String) -> RequestBuilder<V0ProvisionProfileResponseModel> {
        var path = "/apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let provisioningProfileSlugPreEscape = "\(APIHelper.mapValueToPathItem(provisioningProfileSlug))"
        let provisioningProfileSlugPostEscape = provisioningProfileSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provisioning-profile-slug}", with: provisioningProfileSlugPostEscape, options: .literal, range: nil)
        let URLString = BitriseAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<V0ProvisionProfileResponseModel>.Type = BitriseAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a list of the provisioning profiles
     
     - parameter appSlug: (path) App slug 
     - parameter next: (query) Slug of the first provisioning profile in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func provisioningProfileList(appSlug: String, next: String? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = BitriseAPI.apiResponseQueue, completion: @escaping ((_ data: V0ProvisionProfileListResponseModel?,_ error: Error?) -> Void)) {
        provisioningProfileListWithRequestBuilder(appSlug: appSlug, next: next, limit: limit).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a list of the provisioning profiles
     - GET /apps/{app-slug}/provisioning-profiles
     - List all the provisioning profiles that have been uploaded to a specific app. Read more in our [Listing the uploaded iOS code signing files of an app](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#listing-the-uploaded-ios-code-signing-files-of-an-app) guide.
     - API Key:
       - type: apiKey Bitrise-Addon-Auth-Token 
       - name: AddonAuthToken
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter next: (query) Slug of the first provisioning profile in the response (optional)
     - parameter limit: (query) Max number of elements per page (default: 50) (optional)
     - returns: RequestBuilder<V0ProvisionProfileListResponseModel> 
     */
    open class func provisioningProfileListWithRequestBuilder(appSlug: String, next: String? = nil, limit: Int? = nil) -> RequestBuilder<V0ProvisionProfileListResponseModel> {
        var path = "/apps/{app-slug}/provisioning-profiles"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let URLString = BitriseAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "next": next?.encodeToJSON(), 
            "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<V0ProvisionProfileListResponseModel>.Type = BitriseAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a specific provisioning profile
     
     - parameter appSlug: (path) App slug 
     - parameter provisioningProfileSlug: (path) Provisioning profile slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func provisioningProfileShow(appSlug: String, provisioningProfileSlug: String, apiResponseQueue: DispatchQueue = BitriseAPI.apiResponseQueue, completion: @escaping ((_ data: V0ProvisionProfileResponseModel?,_ error: Error?) -> Void)) {
        provisioningProfileShowWithRequestBuilder(appSlug: appSlug, provisioningProfileSlug: provisioningProfileSlug).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a specific provisioning profile
     - GET /apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}
     - Retrieve data of a specific provisioning profile. You can fetch the provisioning profile's slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list) endpoint. Read more in our [Getting a specific iOS code signing file's data](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#getting-a-specific-ios-code-signing-files-data) guide.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter provisioningProfileSlug: (path) Provisioning profile slug 
     - returns: RequestBuilder<V0ProvisionProfileResponseModel> 
     */
    open class func provisioningProfileShowWithRequestBuilder(appSlug: String, provisioningProfileSlug: String) -> RequestBuilder<V0ProvisionProfileResponseModel> {
        var path = "/apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let provisioningProfileSlugPreEscape = "\(APIHelper.mapValueToPathItem(provisioningProfileSlug))"
        let provisioningProfileSlugPostEscape = provisioningProfileSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provisioning-profile-slug}", with: provisioningProfileSlugPostEscape, options: .literal, range: nil)
        let URLString = BitriseAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<V0ProvisionProfileResponseModel>.Type = BitriseAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update a provisioning profile
     
     - parameter appSlug: (path) App slug 
     - parameter provisioningProfileSlug: (path) Provisioning profile slug 
     - parameter provisioningProfile: (body) Provisioning profile parameters 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func provisioningProfileUpdate(appSlug: String, provisioningProfileSlug: String, provisioningProfile: V0ProvProfileDocumentUpdateParams, apiResponseQueue: DispatchQueue = BitriseAPI.apiResponseQueue, completion: @escaping ((_ data: V0ProvisionProfileResponseModel?,_ error: Error?) -> Void)) {
        provisioningProfileUpdateWithRequestBuilder(appSlug: appSlug, provisioningProfileSlug: provisioningProfileSlug, provisioningProfile: provisioningProfile).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a provisioning profile
     - PATCH /apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}
     - Update an uploaded provisioning profile's attributes. You can fetch the provisioning profile's slug if you call the [GET /apps/{app-slug}/provisioning-profiles](https://api-docs.bitrise.io/#/provisioning-profile/provisioning-profile-list) endpoint. Read more in our [Updating an uploaded iOS code signing file](https://devcenter.bitrise.io/api/managing-ios-code-signing-files/#confirming-the-ios-code-signing-file-upload) guide.
     - API Key:
       - type: apiKey Authorization 
       - name: PersonalAccessToken
     - parameter appSlug: (path) App slug 
     - parameter provisioningProfileSlug: (path) Provisioning profile slug 
     - parameter provisioningProfile: (body) Provisioning profile parameters 
     - returns: RequestBuilder<V0ProvisionProfileResponseModel> 
     */
    open class func provisioningProfileUpdateWithRequestBuilder(appSlug: String, provisioningProfileSlug: String, provisioningProfile: V0ProvProfileDocumentUpdateParams) -> RequestBuilder<V0ProvisionProfileResponseModel> {
        var path = "/apps/{app-slug}/provisioning-profiles/{provisioning-profile-slug}"
        let appSlugPreEscape = "\(APIHelper.mapValueToPathItem(appSlug))"
        let appSlugPostEscape = appSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{app-slug}", with: appSlugPostEscape, options: .literal, range: nil)
        let provisioningProfileSlugPreEscape = "\(APIHelper.mapValueToPathItem(provisioningProfileSlug))"
        let provisioningProfileSlugPostEscape = provisioningProfileSlugPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{provisioning-profile-slug}", with: provisioningProfileSlugPostEscape, options: .literal, range: nil)
        let URLString = BitriseAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: provisioningProfile)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<V0ProvisionProfileResponseModel>.Type = BitriseAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
